import functions as fc;
import musicPlay as mp;
import musicInfo as info;

const patternAddrEPD = EPD(0x58D904);
const chatAddrEPD = EPD(0x58D908);
const strOffset = 0x58F500;
const string = EUDCreateVariables(26);
var strShare = false;
var check = false;

function variableInit() {
    EUDRegisterObjectToNamespace("strShare", strShare);
    foreach (i : py_range(26)) {
        EUDRegisterObjectToNamespace(py_eval('"str{}".format(i+1)'), string[i]);
    }
}

function chatTypeUpdate() {
    if (MemoryEPD(EPD(0x68C144), AtLeast, 1)) {
        SetMemoryEPD(EPD(0x68C144), SetTo, 3);
    }
}

function readChat() {
    if (dwread_epd(patternAddrEPD)) {
        strShare = true; check = true;
        foreach (i : py_range(26)) { string[i] = 0; }
        const br = EUDByteReader();
        br.seekoffset(dwread_epd(chatAddrEPD));
        foreach (i : py_range(26)) {
            foreach (j : py_range(3)) {
                const temp = br.readbyte();
                if (temp) { string[i] += temp << (j << 3); }
                else { return; }
            }
        }
    }
}

function writeChat(player) {
    if (strShare) { strShare = false; }
    foreach (cp : EUDLoopPlayer("Human")) {
        if (!mp.correct[cp]) {
            var timer;
            if (fc.getDeath(cp, "Terran Ghost")) {
                if (cp == player) { check = false; timer = 0; }
                for (var i = 0; i < 27; i++) {
                    const byte3 = fc.getDeath(cp, $U("Terran Ghost")+i);
                    if (byte3) { dwwrite(strOffset+i*3, byte3); }
                    else { dwwrite(strOffset+i*3, 0); break; }
                }
                const index = mp.orderArr[mp.curMusic];
                const max = info.indexArr[index];
                const answer = EUDArray.cast(info.ansArr[index]);
                var flag = true;
                for (var i = 0; i < max; i++) {
                    if (!fc.strcmp2(strOffset, answer[i])) {
                        if (mp.correct[player]) { println("{0:c}{0:n}: \x02{1:t}　　　　　　　　　　", cp, EPD(strOffset)); PlayWAV("sound\\Misc\\Transmission.wav"); }
                        SetScore(cp, Add, mp.score, Custom);
                        println("\x1f■ {0:c}{0:n}\x04님이 정답을 맞혀 \x1c{1:}\x04점을 획득 했습니다.", cp, mp.score);
                        PlayWAV("staredit\\wav\\DiceItemStarFall_Swing.wav");
                        mp.correct[cp] = true;
                        mp.txtUpdate = true;
                        flag = false;
                        break;
                    }
                }
                if (flag && player != cp) { println("{0:c}{0:n}: \x02{1:t}　　　　　　　　　　", cp, EPD(strOffset)); PlayWAV("sound\\Misc\\Transmission.wav"); }
            }
            if (check && cp == player) {
                timer++;
                if (timer == 12) { strShare = true; timer = 0; }
            }
        }
        else { check = false; }
    }
}

function allianceRefresh(player) {
    foreach (cp : EUDLoopPlayer("Human")) {
        if (player == cp) { continue; }
        if (mp.correct[player]) {
            if (!mp.chatSeparate) { SetAllianceStatus(cp, Ally); }
            else if (mp.correct[cp]) { SetAllianceStatus(cp, Ally); }
            else { SetAllianceStatus(cp, Enemy); }
        }
        else { SetAllianceStatus(cp, Enemy); }
    }
}